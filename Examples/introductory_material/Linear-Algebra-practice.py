import torch
x = torch.tensor(3.0)
y = torch.tensor(2.0)
# print(x+y)
# print(x-y)
# print(x*y)
# print(x/y)
# print(x**y)
x = torch.arange(3)
# print(x)
# print(x[2])
# print(len(x))
# print(x.shape)
A = torch.arange(6).reshape(3,2)
# print(A)
# print(A.T)
A = torch.tensor([[1, 2, 3], [2, 0, 4], [3, 4, 5]])
A == A.T
A = torch.arange(24).reshape(2,3,4)
A = torch.arange(6, dtype=torch.float32).reshape(2, 3)
# print(A)
B = A.clone()
# print(A+B)
# print(A*B)
a = 2
# print(A*a, (A*a).shape)
x = torch.arange(3, dtype=torch.float32)
# print(x, x.sum())
# print(A.shape, A.sum())
# print(A.shape, A.sum(axis=1).shape)
# print(A.sum(axis=[0, 1]) == A.sum() )
# print(A.mean(), A.sum() / A.numel())
# print(A.mean(axis=0), A.sum(axis=0) / A.shape[0])
sum_A = A.sum(axis=1, keepdims=True)
# print(sum_A, sum_A.shape)
# print(A / sum_A)
# print(A.cumsum(axis=0))
y = torch.ones(3, dtype = torch.float32)
# print(x, y, torch.dot(x, y))
# print(torch.sum(x * y))
# print(A.shape, x.shape, torch.mv(A, x), A@x)
B = torch.ones(3, 4)
# print(torch.mm(A, B), A@B)
u = torch.tensor([3.0, -4.0])
# print(torch.norm(u))
# print(torch.abs(u).sum())
print(torch.norm(torch.ones((4, 9))))